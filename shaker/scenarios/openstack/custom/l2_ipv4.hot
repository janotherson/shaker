heat_template_version: 2013-05-23

description:
  This Heat template creates a new Neutron network, a router to the external
  network and plugs instances into this new network. All instances are located
  in the same L2 domain.

parameters:
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  external_net:
    type: string
    description: ID or name of external network
  server_endpoint:
    type: string
    description: Server endpoint address
  dns_nameservers:
    type: comma_delimited_list
    description: DNS nameservers for the subnet

resources:

{% for agent in agents.values() %}

{% if agent.mode == 'primary' %}

  {{ agent.id }}_private_net:
    type: OS::Neutron::Net
    properties:
      name: {{ unique }}_net

  {{ agent.id }}_private_subnet:
    type: OS::Neutron::Subnet
    depends_on: {{ agent.id }}_private_net
    properties:
      network_id: { get_resource: {{ agent.id }}_private_net }
      cidr: 10.0.0.0/16
      dns_nameservers: { get_param: dns_nameservers }

  {{ agent.id }}_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_net }

  {{ agent.id }}_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [{{ agent.id }}_private_subnet,{{ agent.id }}_router]
    properties:
      router_id: { get_resource: {{ agent.id }}_router }
      subnet_id: { get_resource: {{ agent.id }}_private_subnet }

  {{ agent.id }}_server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: udp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: icmp}]

{% endif %}

  {{ agent.id }}:
    type: OS::Nova::Server
    depends_on: [{{ agent.id }}_port]
    properties:
      name: {{ agent.id }}
      image: { get_param: image }
      flavor: { get_param: flavor }
      availability_zone: "{{ agent.availability_zone }}"
      networks:
        - port: { get_resource: {{ agent.id }}_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            # Populate environment variables via the pyShaker HEAT template.
            echo 'SERVER_ENDPOINT=$SERVER_ENDPOINT' > /etc/default/shaker-agent
            echo 'AGENT_ID=$AGENT_ID' >> /etc/default/shaker-agent

            # shaker-agent unit service. May be uncomment if does not delivered through diskimage-builder.
            # cat<<'EOF' >> /etc/systemd/system/shaker-agent.service
            # [Unit]
            # Description=Shaker Agent
            # After=network-online.target cloud-init.target
            # Wants=network-online.target
            # ConditionPathExists=/etc/default/shaker-agent
            # DefaultDependencies=no
            # Before=shutdown.target
            # Conflicts=shutdown.target

            # [Service]
            # EnvironmentFile=/etc/default/shaker-agent
            # ExecStart=/usr/bin/shaker-agent --server-endpoint=${SERVER_ENDPOINT} --agent-id=${AGENT_ID} --agent-socket-conn-retries 1000 --agent-socket-recv-timeout 100 --agent-socket-send-timeout 100 --agent-dir=/tmp --polling-interval 10 --use-journal --debug
            # Restart=on-failure
            # RestartSec=5s
            # TimeoutStopSec=5

            # [Install]
            # WantedBy=multi-user.target
            # EOF

            # systemctl enable shaker-agent.service
          params:
            "$SERVER_ENDPOINT": { get_param: server_endpoint }
            "$AGENT_ID": {{ agent.id }}

{% if agent.mode == 'primary' %}

  {{ agent.id }}_port:
    type: OS::Neutron::Port
    depends_on: [{{ agent.id }}_router_interface,{{ agent.id }}_server_security_group]
    properties:
      network_id: { get_resource: {{ agent.id }}_private_net }
      fixed_ips:
        - subnet_id: { get_resource: {{ agent.id }}_private_subnet }
      security_groups: [{ get_resource: {{ agent.id }}_server_security_group }]

{% else %}

  {{ agent.id }}_port:
    type: OS::Neutron::Port
    depends_on: [{{ agent.primary_id }}_router_interface,{{ agent.primary_id }}_server_security_group]
    properties:
      network_id: { get_resource: {{ agent.primary_id }}_private_net }
      fixed_ips:
        - subnet_id: { get_resource: {{ agent.primary_id }}_private_subnet }
      security_groups: [{ get_resource: {{ agent.primary_id }}_server_security_group }]

{% endif %}


{% endfor %}

outputs:
{% for agent in agents.values() %}
  {{ agent.id }}_instance_name:
    value: { get_attr: [ {{ agent.id }}, instance_name ] }
  {{ agent.id }}_ip:
{% if agent.mode == 'primary' %}
    value: { get_attr: [ {{ agent.id }}, networks, { get_attr: [{{ agent.id }}_private_net, name] }, 0 ] }
{% else %}
    value: { get_attr: [ {{ agent.id }}, networks, { get_attr: [{{ agent.primary_id }}_private_net, name] }, 0 ] }
{% endif %}
{% endfor %}
