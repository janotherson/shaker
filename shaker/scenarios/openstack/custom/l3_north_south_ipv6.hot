heat_template_version: 2013-05-23

description: >
  This Heat template creates a new Neutron network plugged into a router
  connected to the external network, and boots an instance in that network.
  The instance has floating IP.

parameters:
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  external_net:
    type: string
    description: ID or name of external network for which floating IP addresses will be allocated
  server_endpoint:
    type: string
    description: Server endpoint address
  dns_nameservers:
    type: comma_delimited_list
    description: DNS nameservers for the subnets
  subnet_pool:
    type: string
    description: Name of the subnet pool for IPv6

resources:
 
{% for agent in agents.values() %}

  {{ agent.id }}_private_net:
    type: OS::Neutron::Net
    properties:
      name: {{ unique }}_net

  {{ agent.id }}_private_subnet_ipv6:
    type: OS::Neutron::Subnet
    depends_on: {{ agent.id }}_private_net
    properties:
      network_id: { get_resource: {{ agent.id }}_private_net }
      ip_version: 6
      ipv6_address_mode: dhcpv6-stateful
      ipv6_ra_mode: dhcpv6-stateful
      subnetpool: { get_param: subnet_pool }

  {{ agent.id }}_private_subnet:
    type: OS::Neutron::Subnet
    depends_on: [{{ agent.id }}_private_net,{{ agent.id }}_private_subnet_ipv6]
    properties:
      network_id: { get_resource: {{ agent.id }}_private_net }
      cidr: 10.2.0.0/16
      dns_nameservers: { get_param: dns_nameservers }

  {{ agent.id }}_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_net }

  {{ agent.id }}_router_interface_ipv6:
    type: OS::Neutron::RouterInterface
    depends_on: [{{ agent.id }}_router,{{ agent.id }}_private_subnet_ipv6]
    properties:
      router_id: { get_resource: {{ agent.id }}_router }
      subnet_id: { get_resource: {{ agent.id }}_private_subnet_ipv6 }

  {{ agent.id }}_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [{{ agent.id }}_router,{{ agent.id }}_private_subnet]
    properties:
      router_id: { get_resource: {{ agent.id }}_router }
      subnet_id: { get_resource: {{ agent.id }}_private_subnet }

  {{ agent.id }}_server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: udp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: icmp},
        {remote_ip_prefix: '::/0',
        ethertype: IPv6,
        protocol: tcp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: '::/0',
        ethertype: IPv6,
        protocol: udp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: '::/0',
        ethertype: IPv6,
        protocol: icmpv6}]

  {{ agent.id }}:
    type: OS::Nova::Server
    depends_on: [{{ agent.id }}_port]
    properties:
      name: {{ agent.id }}
      image: { get_param: image }
      flavor: { get_param: flavor }
      availability_zone: "{{ agent.availability_zone }}"
      networks:
        - port: { get_resource: {{ agent.id }}_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh
            screen -dmS shaker-agent-screen shaker-agent --server-endpoint=$SERVER_ENDPOINT --agent-id=$AGENT_ID --agent-socket-conn-retries 10000 --agent-socket-recv-timeout 300 --agent-socket-send-timeout 300 --agent-dir=/tmp --polling-interval 10
          params:
            "$SERVER_ENDPOINT": { get_param: server_endpoint }
            "$AGENT_ID": {{ agent.id }}

  {{ agent.id }}_port:
    type: OS::Neutron::Port
    depends_on: [{{ agent.id }}_router_interface_ipv6,{{ agent.id }}_router_interface,{{ agent.id }}_server_security_group]
    properties:
      network_id: { get_resource: {{ agent.id }}_private_net }
      fixed_ips:
        - subnet_id: { get_resource: {{ agent.id }}_private_subnet_ipv6 }
        - subnet_id: { get_resource: {{ agent.id }}_private_subnet }
      security_groups: [{ get_resource: {{ agent.id }}_server_security_group }]

{% endfor %}

outputs:
{% for agent in agents.values() %}
  {{ agent.id }}_instance_name:
    value: { get_attr: [ {{ agent.id }}, instance_name ] }
  {{ agent.id }}_ip:
    value: { get_attr: [ {{ agent.id }}, networks, { get_attr: [ {{ agent.id }}_private_net, name] } ] }
{% endfor %}