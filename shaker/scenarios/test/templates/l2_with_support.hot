heat_template_version: 2013-05-23

description:
  This Heat template creates a new Neutron network, a router to the external
  network and plugs instances into this new network. All instances are located
  in the same L2 domain. The VMs are also connected to support networks
  that should exist before this template is spun up.

parameters:
  image:
    type: string
    description: Name of image to use for servers
  flavor:
    type: string
    description: Flavor to use for servers
  external_net:
    type: string
    description: ID or name of external network
  server_endpoint:
    type: string
    description: Server endpoint address
  dns_nameservers:
    type: comma_delimited_list
    description: DNS nameservers for the subnet
  support_network_1_name:
    type: string
    description: name of first support network
  support_network_2_name:
    type: string
    description: name of second support network

resources:
  private_net:
    type: OS::Neutron::Net
    properties:
      name: {{ unique }}_net

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: 10.0.0.0/16
      dns_nameservers: { get_param: dns_nameservers }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: external_net }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules: [
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: tcp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: udp,
        port_range_min: 1,
        port_range_max: 65535},
        {remote_ip_prefix: 0.0.0.0/0,
        protocol: icmp}]

{% for agent in agents.values() %}

  {{ agent.id }}:
    type: OS::Nova::Server
    properties:
      name: {{ agent.id }}
      image: { get_param: image }
      flavor: { get_param: flavor }
      availability_zone: "{{ agent.availability_zone }}"
      networks:
        - port: { get_resource: {{ agent.id }}_port }
        - network: { get_param: support_network_1_name }
        - network: { get_param: support_network_2_name }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            # Populate environment variables via the pyShaker HEAT template.
            echo 'SERVER_ENDPOINT=$SERVER_ENDPOINT' > /etc/default/shaker-agent
            echo 'AGENT_ID=$AGENT_ID' >> /etc/default/shaker-agent

            # shaker-agent unit service. May be uncomment if does not delivered through diskimage-builder.
            # cat<<'EOF' >> /etc/systemd/system/shaker-agent.service
            # [Unit]
            # Description=Shaker Agent
            # After=network-online.target cloud-init.target
            # Wants=network-online.target
            # ConditionPathExists=/etc/default/shaker-agent
            # DefaultDependencies=no
            # Before=shutdown.target
            # Conflicts=shutdown.target

            # [Service]
            # EnvironmentFile=/etc/default/shaker-agent
            # ExecStart=/usr/bin/shaker-agent --server-endpoint=${SERVER_ENDPOINT} --agent-id=${AGENT_ID} --agent-socket-conn-retries 1000 --agent-socket-recv-timeout 100 --agent-socket-send-timeout 100 --agent-dir=/tmp --polling-interval 10 --use-journal --debug
            # Restart=on-failure
            # RestartSec=5s
            # TimeoutStopSec=5

            # [Install]
            # WantedBy=multi-user.target
            # EOF

            # systemctl enable shaker-agent.service
          params:
            "$SERVER_ENDPOINT": { get_param: server_endpoint }
            "$AGENT_ID": {{ agent.id }}

  {{ agent.id }}_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group }]

{% endfor %}

outputs:
{% for agent in agents.values() %}
  {{ agent.id }}_instance_name:
    value: { get_attr: [ {{ agent.id }}, instance_name ] }
  {{ agent.id }}_ip:
    value: { get_attr: [ {{ agent.id }}, networks, { get_attr: [private_net, name] }, 0 ] }
{% endfor %}

